{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactCode/react-hook/src/components/UseReducer/FetchData/DataFetchingTwo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  loading: true,\n  error: '',\n  post: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      return {\n        loading: false,\n        post: action.payload,\n        error: ''\n      };\n\n    case 'FETCH_ERROR':\n      return {\n        loading: false,\n        post: {},\n        error: 'Something went wrong'\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction DataFetchingTwo() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    axios.get('https://jsonplaceholder.typicode.com/post/1').then(response => {\n      dispatch({\n        type: 'FETCH_SUCCESS',\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'FETCH_ERROR'\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [state.loading ? 'Loading' : state.post.title, state.error ? state.error : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DataFetchingTwo, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = DataFetchingTwo;\nexport default DataFetchingTwo;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataFetchingTwo\");","map":{"version":3,"sources":["/var/www/html/ReactCode/react-hook/src/components/UseReducer/FetchData/DataFetchingTwo.js"],"names":["React","useReducer","useEffect","axios","initialState","loading","error","post","reducer","state","action","type","payload","DataFetchingTwo","dispatch","get","then","response","data","catch","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,IAAI,EAAE;AAHW,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO;AACHN,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,IAAI,EAAEG,MAAM,CAACE,OAFV;AAGHN,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ,SAAK,aAAL;AACI,aAAO;AACHD,QAAAA,OAAO,EAAE,KADN;AAEHE,QAAAA,IAAI,EAAE,EAFH;AAGHD,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ;AACI,aAAOG,KAAP;AAhBR;AAkBH,CAnBD;;AAqBA,SAASI,eAAT,GAA2B;AAAA;;AACvB,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBb,UAAU,CAACO,OAAD,EAAUJ,YAAV,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACY,GAAN,CAAU,6CAAV,EACMC,IADN,CACWC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAAC;AAACH,QAAAA,IAAI,EAAE,eAAP;AAAwBC,QAAAA,OAAO,EAAEK,QAAQ,CAACC;AAA1C,OAAD,CAAR;AACH,KAHN,EAIMC,KAJN,CAIYb,KAAK,IAAI;AACZQ,MAAAA,QAAQ,CAAC;AAACH,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACH,KANN;AAOH,GARQ,EAQP,EARO,CAAT;AAUA,sBACI;AAAA,eACKF,KAAK,CAACJ,OAAN,GAAgB,SAAhB,GAA4BI,KAAK,CAACF,IAAN,CAAWa,KAD5C,EAEKX,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAApB,GAA4B,IAFjC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAnBQO,e;;KAAAA,e;AAqBT,eAAeA,eAAf","sourcesContent":["import React, {useReducer, useEffect} from 'react'\nimport axios from 'axios'\n\nconst initialState = {\n    loading: true,\n    error: '',\n    post: {}\n}\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case 'FETCH_SUCCESS':\n            return {\n                loading: false,\n                post: action.payload,\n                error: ''\n            }\n        \n        case 'FETCH_ERROR':\n            return {\n                loading: false,\n                post: {},\n                error: 'Something went wrong'\n            }\n\n        default:\n            return state\n    }\n}\n\nfunction DataFetchingTwo() {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n        axios.get('https://jsonplaceholder.typicode.com/post/1')\n             .then(response => {\n                 dispatch({type: 'FETCH_SUCCESS', payload: response.data})\n             })\n             .catch(error => {\n                 dispatch({type: 'FETCH_ERROR'})\n             })\n    },[])\n\n    return (\n        <div>\n            {state.loading ? 'Loading' : state.post.title}\n            {state.error ? state.error : null}\n        </div>\n    )\n}\n\nexport default DataFetchingTwo\n"]},"metadata":{},"sourceType":"module"}