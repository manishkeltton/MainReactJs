[{"/var/www/html/ReactCode/ReactTable/src/index.js":"1","/var/www/html/ReactCode/ReactTable/src/reportWebVitals.js":"2","/var/www/html/ReactCode/ReactTable/src/App.js":"3","/var/www/html/ReactCode/ReactTable/src/components/BasicTable.js":"4","/var/www/html/ReactCode/ReactTable/src/components/columns.js":"5","/var/www/html/ReactCode/ReactTable/src/components/SortingTable.js":"6","/var/www/html/ReactCode/ReactTable/src/components/FilteringTable.js":"7","/var/www/html/ReactCode/ReactTable/src/components/GlobalFilter.js":"8","/var/www/html/ReactCode/ReactTable/src/components/ColumnFilter.js":"9","/var/www/html/ReactCode/ReactTable/src/components/PaginationTable.js":"10"},{"size":500,"mtime":1618371037745,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1618371037745,"results":"13","hashOfConfig":"12"},{"size":483,"mtime":1618422814484,"results":"14","hashOfConfig":"12"},{"size":2469,"mtime":1618391824443,"results":"15","hashOfConfig":"12"},{"size":2018,"mtime":1618414081963,"results":"16","hashOfConfig":"12"},{"size":2984,"mtime":1618408654157,"results":"17","hashOfConfig":"12"},{"size":3235,"mtime":1618414000982,"results":"18","hashOfConfig":"12"},{"size":257,"mtime":1618407943239,"results":"19","hashOfConfig":"12"},{"size":302,"mtime":1618411594891,"results":"20","hashOfConfig":"12"},{"size":4111,"mtime":1618431116653,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1r7oli8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"/var/www/html/ReactCode/ReactTable/src/index.js",[],["48","49"],"/var/www/html/ReactCode/ReactTable/src/reportWebVitals.js",[],"/var/www/html/ReactCode/ReactTable/src/App.js",["50","51","52"],"import './App.css';\nimport { BasicTable } from './components/BasicTable';\nimport { FilteringTable } from './components/FilteringTable';\nimport { PaginationTable } from './components/PaginationTable';\nimport { SortingTable } from './components/SortingTable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         {/* <BasicTable /> */}\n         {/* <SortingTable /> */}\n         {/* <FilteringTable /> */}\n         <PaginationTable />\n    </div>\n  );\n}\n\nexport default App;\n","/var/www/html/ReactCode/ReactTable/src/components/BasicTable.js",["53"],"import React, { useMemo } from 'react'\nimport { useTable } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './columns'\nimport './table.css'\n\nexport const BasicTable = () => {\n\n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n\n    const tableInstance = useTable({\n                              columns,\n                              data\n                          })\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        footerGroups,\n        rows,\n        prepareRow\n    } = tableInstance\n\n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {\n                            headerGroup.headers.map( column => (\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                            ))\n                        }\n                    </tr>\n                ))}               \n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {\n                    rows.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {\n                                    row.cells.map( cell => {\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    })\n                                }\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n            <tfoot>\n                {\n                    footerGroups.map(footerGroup => (\n                        <tr {...footerGroup.getFooterGroupProps()}>\n                            {\n                                footerGroup.headers.map(column => (\n                                    <td {...column.getFooterGroupProps}>\n                                        {\n                                            column.render('Footer')\n                                        }\n                                    </td>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </tfoot>\n        </table>\n    )\n}\n","/var/www/html/ReactCode/ReactTable/src/components/columns.js",[],"/var/www/html/ReactCode/ReactTable/src/components/SortingTable.js",["54"],"import React, { useMemo } from 'react'\nimport { useTable, useSortBy,useGlobalFilter } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './columns'\nimport './table.css'\nimport { GlobalFilter } from './GlobalFilter'\n\nexport const SortingTable = () => {\n\n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n\n    const tableInstance = useTable({\n                              columns,\n                              data\n                          },\n                          useGlobalFilter,useSortBy)\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        footerGroups,\n        rows,\n        prepareRow,\n        state,\n        setGlobalFilter,\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    return (\n        <>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {\n                            headerGroup.headers.map( column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render('Header')}\n                                <span>\n                                    {column.isSorted ? (column.isSortedDesc ? ' Des':' Asc'):''}\n                                </span></th>\n                                ))\n                        }\n                    </tr>\n                ))}               \n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {\n                    rows.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {\n                                    row.cells.map( cell => {\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    })\n                                }\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n            <tfoot>\n                {\n                    footerGroups.map(footerGroup => (\n                        <tr {...footerGroup.getFooterGroupProps()}>\n                            {\n                                footerGroup.headers.map(column => (\n                                    <td {...column.getFooterGroupProps}>\n                                        {\n                                            column.render('Footer')\n                                        }\n                                    </td>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </tfoot>\n        </table>\n        </>\n    )\n}\n","/var/www/html/ReactCode/ReactTable/src/components/FilteringTable.js",["55","56"],"import React, { useMemo } from 'react'\nimport { useTable, useGlobalFilter, useFilters } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './columns'\nimport './table.css'\nimport { GlobalFilter } from './GlobalFilter'\nimport { ColumnFilter } from './ColumnFilter'\n\nexport const FilteringTable = () => {\n\n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n    const defaultColumn = useMemo(() => {\n        return {\n            Filter: ColumnFilter\n        }\n    })\n\n    const tableInstance = useTable({\n                              columns,\n                              data,\n                              defaultColumn\n                          },useFilters,useGlobalFilter)\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        footerGroups,\n        rows,\n        prepareRow,\n        state,\n        setGlobalFilter,\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    return (\n        <>\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map((headerGroup) => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {\n                                headerGroup.headers.map( column => (\n                                    <th {...column.getHeaderProps()}>{column.render('Header')}\n                                    <div>{column.canFilter ? column.render('Filter'): null}</div></th>\n                                ))\n                            }\n                        </tr>\n                    ))}               \n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {\n                        rows.map(row => {\n                            prepareRow(row)\n                            return (\n                                <tr {...row.getRowProps()}>\n                                    {\n                                        row.cells.map( cell => {\n                                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                </tbody>\n                <tfoot>\n                    {\n                        footerGroups.map(footerGroup => (\n                            <tr {...footerGroup.getFooterGroupProps()}>\n                                {\n                                    footerGroup.headers.map(column => (\n                                        <td {...column.getFooterGroupProps}>\n                                            {\n                                                column.render('Footer')\n                                            }\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        ))\n                    }\n                </tfoot>\n            </table>\n        </>\n    )\n}\n","/var/www/html/ReactCode/ReactTable/src/components/GlobalFilter.js",[],"/var/www/html/ReactCode/ReactTable/src/components/ColumnFilter.js",[],"/var/www/html/ReactCode/ReactTable/src/components/PaginationTable.js",["57"],"import React, { useMemo } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './columns'\nimport './table.css'\n\nexport const PaginationTable = () => {\n\n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n\n    const tableInstance = useTable({\n                              columns,\n                              data,\n                              initialState: { pageIndex: 1 }\n                          }, usePagination)\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        page,\n        nextPage,\n        previousPage,\n        canNextPage,\n        canPreviousPage,\n        pageOptions,\n        state,\n        gotoPage,\n        pageCount,\n        setPageSize,\n        prepareRow\n    } = tableInstance\n\n    const { pageIndex, pageSize } = state\n\n    return (\n        <>\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {\n                            headerGroup.headers.map( column => (\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                            ))\n                        }\n                    </tr>\n                ))}               \n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {\n                    page.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {\n                                    row.cells.map( cell => {\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    })\n                                }\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n            {/* <tfoot>\n                {\n                    footerGroups.map(footerGroup => (\n                        <tr {...footerGroup.getFooterGroupProps()}>\n                            {\n                                footerGroup.headers.map(column => (\n                                    <td {...column.getFooterGroupProps}>\n                                        {\n                                            column.render('Footer')\n                                        }\n                                    </td>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </tfoot> */}\n        </table>\n        <div>\n            <span>\n                Page{' '}\n                <strong>\n                    {pageIndex + 1} of {pageOptions.length}\n                </strong>{' '}\n            </span>\n            <span>\n            | Go to page: {' '}\n            <input type=\"number\" defaultValue={pageIndex + 1} \n               onChange={e => {\n                   const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n                   gotoPage(pageNumber)\n               }}\n               style={{width: '50px'}}\n            />\n            </span>\n            <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\n                {\n                    [10, 25, 50].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            show {pageSize}\n                        </option>\n                    ))\n                }\n            </select>\n            <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\n            <button onClick={() => nextPage() } disabled={!canNextPage}>Next</button>\n            <button onClick={() => gotoPage(pageCount-1)} disabled={!canNextPage}>{'>>'}</button>\n\n        </div>\n        </>\n    )\n}\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":20},{"ruleId":"62","severity":1,"message":"66","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":24},{"ruleId":"62","severity":1,"message":"67","line":5,"column":10,"nodeType":"64","messageId":"65","endLine":5,"endColumn":22},{"ruleId":"62","severity":1,"message":"68","line":4,"column":19,"nodeType":"64","messageId":"65","endLine":4,"endColumn":34},{"ruleId":"62","severity":1,"message":"68","line":4,"column":19,"nodeType":"64","messageId":"65","endLine":4,"endColumn":34},{"ruleId":"62","severity":1,"message":"68","line":4,"column":19,"nodeType":"64","messageId":"65","endLine":4,"endColumn":34},{"ruleId":"69","severity":1,"message":"70","line":13,"column":27,"nodeType":"64","endLine":13,"endColumn":34},{"ruleId":"62","severity":1,"message":"68","line":4,"column":19,"nodeType":"64","messageId":"65","endLine":4,"endColumn":34},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'BasicTable' is defined but never used.","Identifier","unusedVar","'FilteringTable' is defined but never used.","'SortingTable' is defined but never used.","'GROUPED_COLUMNS' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-global-assign","no-unsafe-negation"]