{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactCode/ReactTable/src/components/SortingTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { useTable, useSortBy, useGlobalFilter } from 'react-table';\nimport MOCK_DATA from './MOCK_DATA.json';\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\nimport './table.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SortingTable = () => {\n  _s();\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  }, useSortBy);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n          children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: column.isSorted ? column.isSortedDesc ? ' Des' : ' Asc' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 48\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n      children: footerGroups.map(footerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...footerGroup.getFooterGroupProps(),\n        children: footerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"td\", { ...column.getFooterGroupProps,\n          children: column.render('Footer')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SortingTable, \"pjBIPaRCpDJjOFbWNcaYNCnHqio=\", false, function () {\n  return [useTable];\n});\n\n_c = SortingTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingTable\");","map":{"version":3,"sources":["/var/www/html/ReactCode/ReactTable/src/components/SortingTable.js"],"names":["React","useMemo","useTable","useSortBy","useGlobalFilter","MOCK_DATA","COLUMNS","GROUPED_COLUMNS","SortingTable","columns","data","tableInstance","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","footerGroup","getFooterGroupProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA6BC,eAA7B,QAAoD,aAApD;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,WAAzC;AACA,OAAO,aAAP;;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAE9B,QAAMC,OAAO,GAAGR,OAAO,CAAC,MAAMK,OAAP,EAAgB,EAAhB,CAAvB;AACA,QAAMI,IAAI,GAAGT,OAAO,CAAC,MAAMI,SAAP,EAAkB,EAAlB,CAApB;AAEA,QAAMM,aAAa,GAAGT,QAAQ,CAAC;AACLO,IAAAA,OADK;AAELC,IAAAA;AAFK,GAAD,EAIRP,SAJQ,CAA9B;AAMA,QAAM;AACFS,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,YAJE;AAKFC,IAAAA,IALE;AAMFC,IAAAA;AANE,MAOFN,aAPJ;AASA,sBACI,sBAAWC,aAAa,EAAxB;AAAA,4BACI;AAAA,gBACKE,YAAY,CAACI,GAAb,CAAkBC,WAAD,iBACd,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBAEQD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAM,iBAC3B,mBAAQA,MAAM,CAACC,cAAP,CAAsBD,MAAM,CAACE,oBAAP,EAAtB,CAAR;AAAA,qBAA+DF,MAAM,CAACG,MAAP,CAAc,QAAd,CAA/D,eACA;AAAA,sBACKH,MAAM,CAACI,QAAP,GAAmBJ,MAAM,CAACK,YAAP,GAAsB,MAAtB,GAA6B,MAAhD,GAAwD;AAD7D;AAAA;AAAA;AAAA;AAAA,kBADA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAeI,sBAAWd,iBAAiB,EAA5B;AAAA,gBAEQG,IAAI,CAACE,GAAL,CAASU,GAAG,IAAI;AACZX,QAAAA,UAAU,CAACW,GAAD,CAAV;AACA,4BACI,mBAAQA,GAAG,CAACC,WAAJ,EAAR;AAAA,oBAEQD,GAAG,CAACE,KAAJ,CAAUZ,GAAV,CAAea,IAAI,IAAI;AACnB,gCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,wBAA8BD,IAAI,CAACN,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFD;AAFR;AAAA;AAAA;AAAA;AAAA,gBADJ;AASH,OAXD;AAFR;AAAA;AAAA;AAAA;AAAA,YAfJ,eA+BI;AAAA,gBAEQV,YAAY,CAACG,GAAb,CAAiBe,WAAW,iBACxB,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBAEQD,WAAW,CAACZ,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,iBAC1B,mBAAQA,MAAM,CAACY,mBAAf;AAAA,oBAEQZ,MAAM,CAACG,MAAP,CAAc,QAAd;AAFR;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmDH,CAvEM;;GAAMjB,Y;UAKaN,Q;;;KALbM,Y","sourcesContent":["import React, { useMemo } from 'react'\nimport { useTable, useSortBy,useGlobalFilter } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './columns'\nimport './table.css'\n\nexport const SortingTable = () => {\n\n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n\n    const tableInstance = useTable({\n                              columns,\n                              data\n                          },\n                          useSortBy,)\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        footerGroups,\n        rows,\n        prepareRow\n    } = tableInstance\n\n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {\n                            headerGroup.headers.map( column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render('Header')}\n                                <span>\n                                    {column.isSorted ? (column.isSortedDesc ? ' Des':' Asc'):''}\n                                </span></th>\n                                ))\n                        }\n                    </tr>\n                ))}               \n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {\n                    rows.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {\n                                    row.cells.map( cell => {\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    })\n                                }\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n            <tfoot>\n                {\n                    footerGroups.map(footerGroup => (\n                        <tr {...footerGroup.getFooterGroupProps()}>\n                            {\n                                footerGroup.headers.map(column => (\n                                    <td {...column.getFooterGroupProps}>\n                                        {\n                                            column.render('Footer')\n                                        }\n                                    </td>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </tfoot>\n        </table>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}