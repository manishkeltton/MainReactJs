{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactCode/ReactTable/src/components/PaginationTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport MOCK_DATA from './MOCK_DATA.json';\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\nimport './table.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PaginationTable = () => {\n  _s();\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => MOCK_DATA, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  }, usePagination);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    state,\n    gotoPage,\n    pageCount,\n    prepareRow\n  } = tableInstance;\n  const {\n    pageIndex\n  } = state;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: page.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 48\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pageIndex + 1, \" of \", pageOptions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"| Go to page: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: pageIndex + 1,\n          onChange: e => {\n            const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0;\n            gotoPage(pageNumber);\n          },\n          style: {\n            width: ''\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => gotoPage(0),\n        disabled: !canPreviousPage,\n        children: '<<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => previousPage(),\n        disabled: !canPreviousPage,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => nextPage(),\n        disabled: !canNextPage,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => gotoPage(pageCount - 1),\n        disabled: !canNextPage,\n        children: '>>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PaginationTable, \"pjBIPaRCpDJjOFbWNcaYNCnHqio=\", false, function () {\n  return [useTable];\n});\n\n_c = PaginationTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginationTable\");","map":{"version":3,"sources":["/var/www/html/ReactCode/ReactTable/src/components/PaginationTable.js"],"names":["React","useMemo","useTable","usePagination","MOCK_DATA","COLUMNS","GROUPED_COLUMNS","PaginationTable","columns","data","tableInstance","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","state","gotoPage","pageCount","prepareRow","pageIndex","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","length","e","pageNumber","target","value","Number","width"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport { useTable, usePagination } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './columns'\nimport './table.css'\n\nexport const PaginationTable = () => {\n\n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => MOCK_DATA, [])\n\n    const tableInstance = useTable({\n                              columns,\n                              data\n                          }, usePagination)\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        page,\n        nextPage,\n        previousPage,\n        canNextPage,\n        canPreviousPage,\n        pageOptions,\n        state,\n        gotoPage,\n        pageCount,\n        prepareRow\n    } = tableInstance\n\n    const { pageIndex } = state\n\n    return (\n        <>\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {\n                            headerGroup.headers.map( column => (\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                            ))\n                        }\n                    </tr>\n                ))}               \n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {\n                    page.map(row => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {\n                                    row.cells.map( cell => {\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    })\n                                }\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n            {/* <tfoot>\n                {\n                    footerGroups.map(footerGroup => (\n                        <tr {...footerGroup.getFooterGroupProps()}>\n                            {\n                                footerGroup.headers.map(column => (\n                                    <td {...column.getFooterGroupProps}>\n                                        {\n                                            column.render('Footer')\n                                        }\n                                    </td>\n                                ))\n                            }\n                        </tr>\n                    ))\n                }\n            </tfoot> */}\n        </table>\n        <div>\n            <span>\n                Page{' '}\n                <strong>\n                    {pageIndex + 1} of {pageOptions.length}\n                </strong>{' '}\n            </span>\n            <span>\n            | Go to page: {' '}\n            <input type=\"number\" defaultValue={pageIndex + 1} \n               onChange={e => {\n                   const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\n                   gotoPage(pageNumber)\n               }}\n               style={{width: ''}}\n            />\n            </span>\n            <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\n            <button onClick={() => nextPage() } disabled={!canNextPage}>Next</button>\n            <button onClick={() => gotoPage(pageCount-1)} disabled={!canNextPage}>{'>>'}</button>\n\n        </div>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}