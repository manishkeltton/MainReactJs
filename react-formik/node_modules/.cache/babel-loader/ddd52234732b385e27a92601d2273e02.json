{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactCode/react-formik/src/components/YoutubeForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction YoutubeForm() {\n  _s();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    channel: ''\n  };\n\n  const onSubmit = values => {\n    console.log(\" Form Data\", values);\n  };\n\n  const validate = values => {\n    // values.name values.email values.channel\n    // errors.name errors.email errors.channel\n    // errors.name = 'This field is required'\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = 'Required';\n    }\n\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n\n    if (!values.channel) {\n      errors.channel = 'Required';\n    }\n\n    return errors;\n  };\n\n  const formik = useFormik({\n    //Managing the form state\n    initialValues,\n    //Handling form submission\n    onSubmit,\n    //Form Validation \n    validate\n  }); // console.log(\"Formik values\", formik.values)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        value: formik.values.name,\n        onChange: formik.handleChange,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\",\n        value: formik.values.email,\n        onChange: formik.handleChange,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"channel\",\n        children: \"Channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"channel\",\n        name: \"channel\",\n        value: formik.values.channel,\n        onChange: formik.handleChange,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(YoutubeForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = YoutubeForm;\nexport default YoutubeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"YoutubeForm\");","map":{"version":3,"sources":["/var/www/html/ReactCode/react-formik/src/components/YoutubeForm.js"],"names":["React","useFormik","YoutubeForm","initialValues","name","email","channel","onSubmit","values","console","log","validate","errors","test","formik","handleSubmit","handleChange"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AAEnB,QAAMC,aAAa,GAAG;AAClBC,IAAAA,IAAI,EAAE,EADY;AAElBC,IAAAA,KAAK,EAAE,EAFW;AAGlBC,IAAAA,OAAO,EAAE;AAHS,GAAtB;;AAMA,QAAMC,QAAQ,GAAGC,MAAM,IAAI;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAA1B;AACH,GAFD;;AAIA,QAAMG,QAAQ,GAAGH,MAAM,IAAI;AACvB;AACA;AACA;AACA,QAAII,MAAM,GAAG,EAAb;;AAEA,QAAG,CAACJ,MAAM,CAACJ,IAAX,EAAgB;AACZQ,MAAAA,MAAM,CAACR,IAAP,GAAc,UAAd;AACH;;AAED,QAAI,CAACI,MAAM,CAACH,KAAZ,EAAkB;AACdO,MAAAA,MAAM,CAACP,KAAP,GAAe,UAAf;AACH,KAFD,MAEO,IAAI,CAAC,4CAA4CQ,IAA5C,CAAiDL,MAAM,CAACH,KAAxD,CAAL,EAAqE;AACxEO,MAAAA,MAAM,CAACP,KAAP,GAAe,uBAAf;AACH;;AAED,QAAI,CAACG,MAAM,CAACF,OAAZ,EAAoB;AAChBM,MAAAA,MAAM,CAACN,OAAP,GAAiB,UAAjB;AACH;;AAED,WAAOM,MAAP;AACH,GArBD;;AAuBA,QAAME,MAAM,GAAGb,SAAS,CAAC;AACrB;AACAE,IAAAA,aAFqB;AAGrB;AACAI,IAAAA,QAJqB;AAKrB;AACAI,IAAAA;AANqB,GAAD,CAAxB,CAnCmB,CA4CnB;;AAEA,sBACI;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEG,MAAM,CAACC,YAAvB;AAAA,8BACI;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,EAAE,EAAC,MAFP;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,KAAK,EAAED,MAAM,CAACN,MAAP,CAAcJ,IAJzB;AAKI,QAAA,QAAQ,EAAEU,MAAM,CAACE,YALrB;AAMI,QAAA,YAAY,EAAC;AANjB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAWI;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,EAAE,EAAC,OAFP;AAGI,QAAA,IAAI,EAAC,OAHT;AAII,QAAA,KAAK,EAAEF,MAAM,CAACN,MAAP,CAAcH,KAJzB;AAKI,QAAA,QAAQ,EAAES,MAAM,CAACE,YALrB;AAMI,QAAA,YAAY,EAAC;AANjB;AAAA;AAAA;AAAA;AAAA,cAZJ,eAqBI;AAAO,QAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ,eAsBI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,EAAE,EAAC,SAFP;AAGI,QAAA,IAAI,EAAC,SAHT;AAII,QAAA,KAAK,EAAEF,MAAM,CAACN,MAAP,CAAcF,OAJzB;AAKI,QAAA,QAAQ,EAAEQ,MAAM,CAACE,YALrB;AAMI,QAAA,YAAY,EAAC;AANjB;AAAA;AAAA;AAAA;AAAA,cAtBJ,eA+BI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqCH;;GAnFQd,W;UAmCUD,S;;;KAnCVC,W;AAqFT,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport { useFormik } from 'formik'\n\nfunction YoutubeForm() {\n\n    const initialValues = {\n        name: '',\n        email: '',\n        channel: ''\n    }\n\n    const onSubmit = values => {\n        console.log(\" Form Data\", values);\n    }\n\n    const validate = values => {\n        // values.name values.email values.channel\n        // errors.name errors.email errors.channel\n        // errors.name = 'This field is required'\n        let errors = {}\n        \n        if(!values.name){\n            errors.name = 'Required'\n        }\n\n        if (!values.email){\n            errors.email = 'Required'\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = 'Invalid email address';\n        }\n\n        if (!values.channel){\n            errors.channel = 'Required'\n        }\n\n        return errors\n    } \n    \n    const formik = useFormik({\n        //Managing the form state\n        initialValues,\n        //Handling form submission\n        onSubmit,\n        //Form Validation \n        validate\n    });\n\n    // console.log(\"Formik values\", formik.values)\n\n    return (\n        <div>\n            <form onSubmit={formik.handleSubmit}>\n                <label htmlFor='name'>Name</label>\n                <input \n                    type='text' \n                    id='name' \n                    name='name' \n                    value={formik.values.name} \n                    onChange={formik.handleChange} \n                    autoComplete=\"off\"\n                />\n\n                <label htmlFor='email'>E-mail</label>\n                <input \n                    type='email' \n                    id='email' \n                    name='email' \n                    value={formik.values.email} \n                    onChange={formik.handleChange} \n                    autoComplete=\"off\"\n                />\n\n                <label htmlFor='channel'>Channel</label>\n                <input \n                    type='text' \n                    id='channel' \n                    name='channel' \n                    value={formik.values.channel} \n                    onChange={formik.handleChange} \n                    autoComplete=\"off\"\n                />\n\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default YoutubeForm\n"]},"metadata":{},"sourceType":"module"}