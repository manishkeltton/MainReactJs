{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactCode/react-formik/src/components/YoutubeForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useFormik } from 'formik'; //Managing the form state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: '',\n  email: '',\n  channel: ''\n}; //Handling form submission\n\nconst onSubmit = values => {\n  console.log(\" Form Data\", values);\n}; //Form Validation \n\n\nconst validate = values => {\n  // values.name values.email values.channel\n  // errors.name errors.email errors.channel\n  // errors.name = 'This field is required'\n  let errors = {};\n\n  if (!values.name) {\n    errors.name = 'Required';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email format';\n  }\n\n  if (!values.channel) {\n    errors.channel = 'Required';\n  }\n\n  return errors;\n};\n\nfunction YoutubeForm() {\n  _s();\n\n  const formik = useFormik({\n    initialValues,\n    onSubmit,\n    validate\n  }); // console.log(\"Visited Field\", formik.touched);\n  // console.log(\"Formik error\", formik.error);\n  // console.log(\"Formik values\", formik.values)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          value: formik.values.name,\n          onBlur: formik.handleBlur //helper method  \n          ,\n          onChange: formik.handleChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), formik.formik.errors.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: formik.errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: formik.values.email,\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: formik.errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"channel\",\n          children: \"Channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"channel\",\n          name: \"channel\",\n          value: formik.values.channel,\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), formik.errors.channel ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: formik.errors.channel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(YoutubeForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = YoutubeForm;\nexport default YoutubeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"YoutubeForm\");","map":{"version":3,"sources":["/var/www/html/ReactCode/react-formik/src/components/YoutubeForm.js"],"names":["React","useFormik","initialValues","name","email","channel","onSubmit","values","console","log","validate","errors","test","YoutubeForm","formik","handleSubmit","handleBlur","handleChange"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useFormik } from 'formik'\n\n//Managing the form state\nconst initialValues = {\n    name: '',\n    email: '',\n    channel: ''\n}\n\n//Handling form submission\nconst onSubmit = values => {\n    console.log(\" Form Data\", values);\n}\n\n//Form Validation \nconst validate = values => {\n    // values.name values.email values.channel\n    // errors.name errors.email errors.channel\n    // errors.name = 'This field is required'\n    let errors = {}\n    \n    if(!values.name){\n        errors.name = 'Required'\n    }\n\n    if (!values.email){\n        errors.email = 'Required'\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email format';\n    }\n\n    if (!values.channel){\n        errors.channel = 'Required'\n    }\n\n    return errors\n} \n\n\nfunction YoutubeForm() {\n\n    const formik = useFormik({  \n        initialValues,\n        onSubmit,\n        validate\n    });\n\n    // console.log(\"Visited Field\", formik.touched);\n    // console.log(\"Formik error\", formik.error);\n    // console.log(\"Formik values\", formik.values)\n\n    return (\n        <div>\n            <form onSubmit={formik.handleSubmit}>\n                <div className='form-control'>\n                    <label htmlFor='name'>Name</label>\n                    <input \n                        type='text' \n                        id='name' \n                        name='name' \n                        value={formik.values.name}\n                        onBlur={formik.handleBlur}//helper method  \n                        onChange={formik.handleChange} \n                        autoComplete=\"off\"\n                    />\n                    { formik. formik.errors.name ? (\n                        <div className='error'>{formik.errors.name}</div>\n                    ) : null}\n                </div>\n\n                <div className='form-control'>\n                    <label htmlFor='email'>E-mail</label>\n                    <input \n                        type='email' \n                        id='email' \n                        name='email' \n                        value={formik.values.email} \n                        onBlur={formik.handleBlur}\n                        onChange={formik.handleChange} \n                        autoComplete=\"off\"\n                    />\n                    {formik.errors.email ? (\n                        <div className='error'>{formik.errors.email}</div>\n                    ) : null}\n                </div>\n\n                <div className='form-control'>\n                    <label htmlFor='channel'>Channel</label>\n                    <input \n                        type='text' \n                        id='channel' \n                        name='channel' \n                        value={formik.values.channel} \n                        onBlur={formik.handleBlur}\n                        onChange={formik.handleChange} \n                        autoComplete=\"off\"\n                    />\n                    {formik.errors.channel ? (\n                        <div className='error'>{formik.errors.channel}</div>\n                    ) : null}\n                </div>\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default YoutubeForm\n"]},"metadata":{},"sourceType":"module"}