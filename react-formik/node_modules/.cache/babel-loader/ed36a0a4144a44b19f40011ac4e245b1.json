{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactCode/react-formik/src/components/YoutubeForm.js\";\nimport React from 'react';\nimport { Formik, Form, Field, useFormik } from 'formik';\nimport * as Yup from 'yup'; //Managing the form state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: '',\n  email: '',\n  channel: ''\n}; //Handling form submission\n\nconst onSubmit = values => {\n  console.log(\" Form Data\", values);\n}; //Form Validation \n// const validate = values => {\n// values.name values.email values.channel\n// errors.name errors.email errors.channel\n// errors.name = 'This field is required'\n//     let errors = {}\n//     if(!values.name){\n//         errors.name = 'Required'\n//     }\n//     if (!values.email){\n//         errors.email = 'Required'\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n//         errors.email = 'Invalid email format';\n//     }\n//     if (!values.channel){\n//         errors.channel = 'Required'\n//     }\n//     return errors\n// } \n\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Required!'),\n  email: Yup.string().email('Invalid email format').required('Required'),\n  channel: Yup.string().required('Required')\n});\n\nfunction YoutubeForm() {\n  // const formik = useFormik({  \n  //     initialValues,\n  //     onSubmit,\n  //     validationSchema,\n  // validate\n  // });\n  // console.log(\"Visited Field\", formik.touched);\n  // console.log(\"Formik error\", formik.error);\n  // console.log(\"Formik values\", formik.values)\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    children: [\"initialValues=\", initialValues, \"validationSchema=\", validationSchema, \"onSubmit=\", onSubmit, /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\" // value={formik.values.name}\n          // onBlur={formik.handleBlur}//helper method  \n          // onChange={formik.handleChange} \n          ,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), formik.touched.name && formik.errors.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: formik.errors.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\" // value={formik.values.email} \n          // onBlur={formik.handleBlur}\n          // onChange={formik.handleChange} \n          ,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: formik.errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"channel\",\n          children: \"Channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          id: \"channel\",\n          name: \"channel\" // value={formik.values.channel} \n          // onBlur={formik.handleBlur}\n          // onChange={formik.handleChange} \n          ,\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), formik.touched.channel && formik.errors.channel ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: formik.errors.channel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_c = YoutubeForm;\nexport default YoutubeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"YoutubeForm\");","map":{"version":3,"sources":["/var/www/html/ReactCode/react-formik/src/components/YoutubeForm.js"],"names":["React","Formik","Form","Field","useFormik","Yup","initialValues","name","email","channel","onSubmit","values","console","log","validationSchema","object","string","required","YoutubeForm","formik","touched","errors"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Formik, Form, Field, useFormik } from 'formik'\nimport * as Yup from 'yup'\n\n//Managing the form state\nconst initialValues = {\n    name: '',\n    email: '',\n    channel: ''\n}\n\n//Handling form submission\nconst onSubmit = values => {\n    console.log(\" Form Data\", values);\n}\n\n//Form Validation \n// const validate = values => {\n    // values.name values.email values.channel\n    // errors.name errors.email errors.channel\n    // errors.name = 'This field is required'\n//     let errors = {}\n    \n//     if(!values.name){\n//         errors.name = 'Required'\n//     }\n\n//     if (!values.email){\n//         errors.email = 'Required'\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n//         errors.email = 'Invalid email format';\n//     }\n\n//     if (!values.channel){\n//         errors.channel = 'Required'\n//     }\n\n//     return errors\n// } \n\nconst validationSchema = Yup.object({\n    name: Yup.string().required('Required!'),\n    email: Yup.string().email('Invalid email format').required('Required'),\n    channel: Yup.string().required('Required')\n})\n\nfunction YoutubeForm() {\n\n    // const formik = useFormik({  \n    //     initialValues,\n    //     onSubmit,\n    //     validationSchema,\n        // validate\n    // });\n\n    // console.log(\"Visited Field\", formik.touched);\n    // console.log(\"Formik error\", formik.error);\n    // console.log(\"Formik values\", formik.values)\n\n    return (\n        <Formik>\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n            <Form>\n                <div className='form-control'>\n                    <label htmlFor='name'>Name</label>\n                    <Field \n                        type='text' \n                        id='name' \n                        name='name' \n                        // value={formik.values.name}\n                        // onBlur={formik.handleBlur}//helper method  \n                        // onChange={formik.handleChange} \n                        autoComplete=\"off\"\n                    />\n                    { formik.touched.name && formik.errors.name ? (\n                        <div className='error'>{formik.errors.name}</div>\n                    ) : null}\n                </div>\n\n                <div className='form-control'>\n                    <label htmlFor='email'>E-mail</label>\n                    <Field \n                        type='email' \n                        id='email' \n                        name='email' \n                        // value={formik.values.email} \n                        // onBlur={formik.handleBlur}\n                        // onChange={formik.handleChange} \n                        autoComplete=\"off\"\n                    />\n                    {formik.touched.email && formik.errors.email ? (\n                        <div className='error'>{formik.errors.email}</div>\n                    ) : null}\n                </div>\n\n                <div className='form-control'>\n                    <label htmlFor='channel'>Channel</label>\n                    <Field \n                        type='text' \n                        id='channel' \n                        name='channel' \n                        // value={formik.values.channel} \n                        // onBlur={formik.handleBlur}\n                        // onChange={formik.handleChange} \n                        autoComplete=\"off\"\n                    />\n                    { formik.touched.channel && formik.errors.channel ? (\n                        <div className='error'>{formik.errors.channel}</div>\n                    ) : null}\n                </div>\n                <button type=\"submit\">Submit</button>\n            </Form>\n        </Formik>\n    )\n}\n\nexport default YoutubeForm\n"]},"metadata":{},"sourceType":"module"}